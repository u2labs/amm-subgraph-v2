// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Loan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Loan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Loan must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Loan", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Loan | null {
    return changetype<Loan | null>(store.get_in_block("Loan", id));
  }

  static load(id: string): Loan | null {
    return changetype<Loan | null>(store.get("Loan", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrowAmount(): BigInt {
    let value = this.get("borrowAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set borrowAmount(value: BigInt) {
    this.set("borrowAmount", Value.fromBigInt(value));
  }

  get borrowTime(): i32 {
    let value = this.get("borrowTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowTime(value: i32) {
    this.set("borrowTime", Value.fromI32(value));
  }

  get stakeAmount(): BigInt {
    let value = this.get("stakeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakeAmount(value: BigInt) {
    this.set("stakeAmount", Value.fromBigInt(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get repayTime(): i32 {
    let value = this.get("repayTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set repayTime(value: i32) {
    this.set("repayTime", Value.fromI32(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get loanPackage(): string | null {
    let value = this.get("loanPackage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set loanPackage(value: string | null) {
    if (!value) {
      this.unset("loanPackage");
    } else {
      this.set("loanPackage", Value.fromString(<string>value));
    }
  }

  get stakeId(): BigInt {
    let value = this.get("stakeId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakeId(value: BigInt) {
    this.set("stakeId", Value.fromBigInt(value));
  }

  get payOffTime(): i32 {
    let value = this.get("payOffTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set payOffTime(value: i32) {
    this.set("payOffTime", Value.fromI32(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get loans(): LoanLoader {
    return new LoanLoader("User", this.get("id")!.toString(), "loans");
  }

  get loanHistorys(): LoanHistoryLoader {
    return new LoanHistoryLoader(
      "User",
      this.get("id")!.toString(),
      "loanHistorys"
    );
  }
}

export class LoanPackage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LoanPackage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LoanPackage must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LoanPackage", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LoanPackage | null {
    return changetype<LoanPackage | null>(
      store.get_in_block("LoanPackage", id)
    );
  }

  static load(id: string): LoanPackage | null {
    return changetype<LoanPackage | null>(store.get("LoanPackage", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get period(): i32 {
    let value = this.get("period");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set period(value: i32) {
    this.set("period", Value.fromI32(value));
  }

  get maxBorrowRatio(): BigDecimal {
    let value = this.get("maxBorrowRatio");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set maxBorrowRatio(value: BigDecimal) {
    this.set("maxBorrowRatio", Value.fromBigDecimal(value));
  }

  get annualRate(): BigDecimal {
    let value = this.get("annualRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set annualRate(value: BigDecimal) {
    this.set("annualRate", Value.fromBigDecimal(value));
  }

  get minBorrow(): BigInt {
    let value = this.get("minBorrow");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minBorrow(value: BigInt) {
    this.set("minBorrow", Value.fromBigInt(value));
  }

  get symbolTime(): string {
    let value = this.get("symbolTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbolTime(value: string) {
    this.set("symbolTime", Value.fromString(value));
  }

  get annualRateOrigin(): BigInt {
    let value = this.get("annualRateOrigin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set annualRateOrigin(value: BigInt) {
    this.set("annualRateOrigin", Value.fromBigInt(value));
  }
}

export class LoanHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LoanHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LoanHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LoanHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LoanHistory | null {
    return changetype<LoanHistory | null>(
      store.get_in_block("LoanHistory", id)
    );
  }

  static load(id: string): LoanHistory | null {
    return changetype<LoanHistory | null>(store.get("LoanHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get borrowTime(): i32 {
    let value = this.get("borrowTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowTime(value: i32) {
    this.set("borrowTime", Value.fromI32(value));
  }

  get processTime(): i32 {
    let value = this.get("processTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set processTime(value: i32) {
    this.set("processTime", Value.fromI32(value));
  }

  get borrowAmount(): BigInt {
    let value = this.get("borrowAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set borrowAmount(value: BigInt) {
    this.set("borrowAmount", Value.fromBigInt(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get repayTime(): i32 {
    let value = this.get("repayTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set repayTime(value: i32) {
    this.set("repayTime", Value.fromI32(value));
  }

  get stakeAmount(): BigInt {
    let value = this.get("stakeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakeAmount(value: BigInt) {
    this.set("stakeAmount", Value.fromBigInt(value));
  }

  get loanId(): BigInt {
    let value = this.get("loanId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set loanId(value: BigInt) {
    this.set("loanId", Value.fromBigInt(value));
  }

  get rewardUser(): BigInt {
    let value = this.get("rewardUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardUser(value: BigInt) {
    this.set("rewardUser", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get stakeId(): BigInt {
    let value = this.get("stakeId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakeId(value: BigInt) {
    this.set("stakeId", Value.fromBigInt(value));
  }

  get txn(): string {
    let value = this.get("txn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set txn(value: string) {
    this.set("txn", Value.fromString(value));
  }
}

export class LoanLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Loan[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Loan[]>(value);
  }
}

export class LoanHistoryLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): LoanHistory[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<LoanHistory[]>(value);
  }
}
