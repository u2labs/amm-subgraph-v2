// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CancelCommit extends ethereum.Event {
  get params(): CancelCommit__Params {
    return new CancelCommit__Params(this);
  }
}

export class CancelCommit__Params {
  _event: CancelCommit;

  constructor(event: CancelCommit) {
    this._event = event;
  }

  get committer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get launchPadContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ClaimGiveBack extends ethereum.Event {
  get params(): ClaimGiveBack__Params {
    return new ClaimGiveBack__Params(this);
  }
}

export class ClaimGiveBack__Params {
  _event: ClaimGiveBack;

  constructor(event: ClaimGiveBack) {
    this._event = event;
  }

  get committer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get launchPadContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Commit extends ethereum.Event {
  get params(): Commit__Params {
    return new Commit__Params(this);
  }
}

export class Commit__Params {
  _event: Commit;

  constructor(event: Commit) {
    this._event = event;
  }

  get committer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get launchPadContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ApplyWhiteList extends ethereum.Event {
  get params(): ApplyWhiteList__Params {
    return new ApplyWhiteList__Params(this);
  }
}

export class ApplyWhiteList__Params {
  _event: ApplyWhiteList;

  constructor(event: ApplyWhiteList) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ClaimToken extends ethereum.Event {
  get params(): ClaimToken__Params {
    return new ClaimToken__Params(this);
  }
}

export class ClaimToken__Params {
  _event: ClaimToken;

  constructor(event: ClaimToken) {
    this._event = event;
  }

  get committer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get launchPadContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Refund extends ethereum.Event {
  get params(): Refund__Params {
    return new Refund__Params(this);
  }
}

export class Refund__Params {
  _event: Refund;

  constructor(event: Refund) {
    this._event = event;
  }

  get committer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get launchPadContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LaunchPad__givebackStatusResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class LaunchPad__userCommitResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getU2uCommited(): BigInt {
    return this.value0;
  }

  getGiveBackAmount(): BigInt {
    return this.value1;
  }

  getIsWhiteList(): boolean {
    return this.value2;
  }
}

export class LaunchPad extends ethereum.SmartContract {
  static bind(address: Address): LaunchPad {
    return new LaunchPad("LaunchPad", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  OPERATOR_ROLE(): Bytes {
    let result = super.call("OPERATOR_ROLE", "OPERATOR_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_OPERATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "OPERATOR_ROLE",
      "OPERATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  checkTier(): boolean {
    let result = super.call("checkTier", "checkTier():(bool)", []);

    return result[0].toBoolean();
  }

  try_checkTier(): ethereum.CallResult<boolean> {
    let result = super.tryCall("checkTier", "checkTier():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  claimGiveBackFromManager(user: Address): BigInt {
    let result = super.call(
      "claimGiveBackFromManager",
      "claimGiveBackFromManager(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_claimGiveBackFromManager(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimGiveBackFromManager",
      "claimGiveBackFromManager(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentCommit(): BigInt {
    let result = super.call("currentCommit", "currentCommit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentCommit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentCommit",
      "currentCommit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  end(): BigInt {
    let result = super.call("end", "end():(uint256)", []);

    return result[0].toBigInt();
  }

  try_end(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("end", "end():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  endCancel(): BigInt {
    let result = super.call("endCancel", "endCancel():(uint256)", []);

    return result[0].toBigInt();
  }

  try_endCancel(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("endCancel", "endCancel():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBalanceSnapShot(account: Address): BigInt {
    let result = super.call(
      "getBalanceSnapShot",
      "getBalanceSnapShot(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getBalanceSnapShot(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBalanceSnapShot",
      "getBalanceSnapShot(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGiveBackAmountTier(account: Address): BigInt {
    let result = super.call(
      "getGiveBackAmountTier",
      "getGiveBackAmountTier(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getGiveBackAmountTier(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGiveBackAmountTier",
      "getGiveBackAmountTier(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  givebackStatus(account: Address): LaunchPad__givebackStatusResult {
    let result = super.call(
      "givebackStatus",
      "givebackStatus(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return new LaunchPad__givebackStatusResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_givebackStatus(
    account: Address
  ): ethereum.CallResult<LaunchPad__givebackStatusResult> {
    let result = super.tryCall(
      "givebackStatus",
      "givebackStatus(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LaunchPad__givebackStatusResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastCurrentCommit(): BigInt {
    let result = super.call(
      "lastCurrentCommit",
      "lastCurrentCommit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastCurrentCommit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCurrentCommit",
      "lastCurrentCommit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  launchPadContract(): Address {
    let result = super.call(
      "launchPadContract",
      "launchPadContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_launchPadContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "launchPadContract",
      "launchPadContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxBuyPerUser(): BigInt {
    let result = super.call("maxBuyPerUser", "maxBuyPerUser():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxBuyPerUser(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxBuyPerUser",
      "maxBuyPerUser():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxCommitAmount(): BigInt {
    let result = super.call(
      "maxCommitAmount",
      "maxCommitAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxCommitAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxCommitAmount",
      "maxCommitAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxStake(): BigInt {
    let result = super.call("maxStake", "maxStake():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxStake", "maxStake():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minStake(): BigInt {
    let result = super.call("minStake", "minStake():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minStake", "minStake():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  percentCancel(): BigInt {
    let result = super.call("percentCancel", "percentCancel():(uint256)", []);

    return result[0].toBigInt();
  }

  try_percentCancel(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "percentCancel",
      "percentCancel():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundType(): string {
    let result = super.call("roundType", "roundType():(string)", []);

    return result[0].toString();
  }

  try_roundType(): ethereum.CallResult<string> {
    let result = super.tryCall("roundType", "roundType():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  start(): BigInt {
    let result = super.call("start", "start():(uint256)", []);

    return result[0].toBigInt();
  }

  try_start(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("start", "start():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  launchpadContract(): Address {
    let result = super.call(
      "launchpadContract",
      "launchpadContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_launchpadContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "launchpadContract",
      "launchpadContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  viewRounds(): Array<Address> {
    let result = super.call("viewRounds", "viewRounds():(address[])", []);

    return result[0].toAddressArray();
  }

  try_viewRounds(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("viewRounds", "viewRounds():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  startCancel(): BigInt {
    let result = super.call("startCancel", "startCancel():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startCancel(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startCancel", "startCancel():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userCommit(param0: Address): LaunchPad__userCommitResult {
    let result = super.call(
      "userCommit",
      "userCommit(address):(uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new LaunchPad__userCommitResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean()
    );
  }

  try_userCommit(
    param0: Address
  ): ethereum.CallResult<LaunchPad__userCommitResult> {
    let result = super.tryCall(
      "userCommit",
      "userCommit(address):(uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LaunchPad__userCommitResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddWhiteListCall extends ethereum.Call {
  get inputs(): AddWhiteListCall__Inputs {
    return new AddWhiteListCall__Inputs(this);
  }

  get outputs(): AddWhiteListCall__Outputs {
    return new AddWhiteListCall__Outputs(this);
  }
}

export class AddWhiteListCall__Inputs {
  _call: AddWhiteListCall;

  constructor(call: AddWhiteListCall) {
    this._call = call;
  }
}

export class AddWhiteListCall__Outputs {
  _call: AddWhiteListCall;

  constructor(call: AddWhiteListCall) {
    this._call = call;
  }
}

export class CaculatorPharseCall extends ethereum.Call {
  get inputs(): CaculatorPharseCall__Inputs {
    return new CaculatorPharseCall__Inputs(this);
  }

  get outputs(): CaculatorPharseCall__Outputs {
    return new CaculatorPharseCall__Outputs(this);
  }
}

export class CaculatorPharseCall__Inputs {
  _call: CaculatorPharseCall;

  constructor(call: CaculatorPharseCall) {
    this._call = call;
  }

  get nextRound(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CaculatorPharseCall__Outputs {
  _call: CaculatorPharseCall;

  constructor(call: CaculatorPharseCall) {
    this._call = call;
  }
}

export class CancelCommitCall extends ethereum.Call {
  get inputs(): CancelCommitCall__Inputs {
    return new CancelCommitCall__Inputs(this);
  }

  get outputs(): CancelCommitCall__Outputs {
    return new CancelCommitCall__Outputs(this);
  }
}

export class CancelCommitCall__Inputs {
  _call: CancelCommitCall;

  constructor(call: CancelCommitCall) {
    this._call = call;
  }
}

export class CancelCommitCall__Outputs {
  _call: CancelCommitCall;

  constructor(call: CancelCommitCall) {
    this._call = call;
  }
}

export class ClaimGiveBackCall extends ethereum.Call {
  get inputs(): ClaimGiveBackCall__Inputs {
    return new ClaimGiveBackCall__Inputs(this);
  }

  get outputs(): ClaimGiveBackCall__Outputs {
    return new ClaimGiveBackCall__Outputs(this);
  }
}

export class ClaimGiveBackCall__Inputs {
  _call: ClaimGiveBackCall;

  constructor(call: ClaimGiveBackCall) {
    this._call = call;
  }
}

export class ClaimGiveBackCall__Outputs {
  _call: ClaimGiveBackCall;

  constructor(call: ClaimGiveBackCall) {
    this._call = call;
  }
}

export class ClaimGiveBackFromManagerCall extends ethereum.Call {
  get inputs(): ClaimGiveBackFromManagerCall__Inputs {
    return new ClaimGiveBackFromManagerCall__Inputs(this);
  }

  get outputs(): ClaimGiveBackFromManagerCall__Outputs {
    return new ClaimGiveBackFromManagerCall__Outputs(this);
  }
}

export class ClaimGiveBackFromManagerCall__Inputs {
  _call: ClaimGiveBackFromManagerCall;

  constructor(call: ClaimGiveBackFromManagerCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimGiveBackFromManagerCall__Outputs {
  _call: ClaimGiveBackFromManagerCall;

  constructor(call: ClaimGiveBackFromManagerCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CommitCall extends ethereum.Call {
  get inputs(): CommitCall__Inputs {
    return new CommitCall__Inputs(this);
  }

  get outputs(): CommitCall__Outputs {
    return new CommitCall__Outputs(this);
  }
}

export class CommitCall__Inputs {
  _call: CommitCall;

  constructor(call: CommitCall) {
    this._call = call;
  }
}

export class CommitCall__Outputs {
  _call: CommitCall;

  constructor(call: CommitCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class ReceiptLimitCommitCall extends ethereum.Call {
  get inputs(): ReceiptLimitCommitCall__Inputs {
    return new ReceiptLimitCommitCall__Inputs(this);
  }

  get outputs(): ReceiptLimitCommitCall__Outputs {
    return new ReceiptLimitCommitCall__Outputs(this);
  }
}

export class ReceiptLimitCommitCall__Inputs {
  _call: ReceiptLimitCommitCall;

  constructor(call: ReceiptLimitCommitCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReceiptLimitCommitCall__Outputs {
  _call: ReceiptLimitCommitCall;

  constructor(call: ReceiptLimitCommitCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class UpdateConfigCall extends ethereum.Call {
  get inputs(): UpdateConfigCall__Inputs {
    return new UpdateConfigCall__Inputs(this);
  }

  get outputs(): UpdateConfigCall__Outputs {
    return new UpdateConfigCall__Outputs(this);
  }
}

export class UpdateConfigCall__Inputs {
  _call: UpdateConfigCall;

  constructor(call: UpdateConfigCall) {
    this._call = call;
  }

  get _launchPadContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _minStake(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _maxStake(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maxBuyPerUser(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _start(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _end(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _maxCommitAmount(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _startCancel(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _endCancel(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _percentCancel(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _roundType(): string {
    return this._call.inputValues[10].value.toString();
  }
}

export class UpdateConfigCall__Outputs {
  _call: UpdateConfigCall;

  constructor(call: UpdateConfigCall) {
    this._call = call;
  }
}
