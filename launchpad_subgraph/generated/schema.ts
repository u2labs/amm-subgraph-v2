// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionHistorys(): TransactionHistoryLoader {
    return new TransactionHistoryLoader(
      "User",
      this.get("id")!.toString(),
      "transactionHistorys"
    );
  }

  get commits(): UserCommitLoader {
    return new UserCommitLoader("User", this.get("id")!.toString(), "commits");
  }

  get projects(): Array<string> {
    let value = this.get("projects");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set projects(value: Array<string>) {
    this.set("projects", Value.fromStringArray(value));
  }
}

export class TransactionHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransactionHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransactionHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TransactionHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TransactionHistory | null {
    return changetype<TransactionHistory | null>(
      store.get_in_block("TransactionHistory", id)
    );
  }

  static load(id: string): TransactionHistory | null {
    return changetype<TransactionHistory | null>(
      store.get("TransactionHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionType(): string {
    let value = this.get("transactionType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transactionType(value: string) {
    this.set("transactionType", Value.fromString(value));
  }

  get processTime(): i32 {
    let value = this.get("processTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set processTime(value: i32) {
    this.set("processTime", Value.fromI32(value));
  }

  get u2uAmount(): BigInt {
    let value = this.get("u2uAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set u2uAmount(value: BigInt) {
    this.set("u2uAmount", Value.fromBigInt(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get roundType(): string {
    let value = this.get("roundType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set roundType(value: string) {
    this.set("roundType", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get launchpadAddress(): string {
    let value = this.get("launchpadAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set launchpadAddress(value: string) {
    this.set("launchpadAddress", Value.fromString(value));
  }

  get roundAddress(): string {
    let value = this.get("roundAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set roundAddress(value: string) {
    this.set("roundAddress", Value.fromString(value));
  }

  get hash(): string {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }
}

export class UserCommit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserCommit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserCommit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserCommit", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserCommit | null {
    return changetype<UserCommit | null>(store.get_in_block("UserCommit", id));
  }

  static load(id: string): UserCommit | null {
    return changetype<UserCommit | null>(store.get("UserCommit", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get u2uAmount(): BigInt {
    let value = this.get("u2uAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set u2uAmount(value: BigInt) {
    this.set("u2uAmount", Value.fromBigInt(value));
  }

  get roundAddress(): string {
    let value = this.get("roundAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set roundAddress(value: string) {
    this.set("roundAddress", Value.fromString(value));
  }

  get launchpadAddress(): string {
    let value = this.get("launchpadAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set launchpadAddress(value: string) {
    this.set("launchpadAddress", Value.fromString(value));
  }

  get roundType(): string {
    let value = this.get("roundType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set roundType(value: string) {
    this.set("roundType", Value.fromString(value));
  }

  get startCancel(): i32 {
    let value = this.get("startCancel");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set startCancel(value: i32) {
    this.set("startCancel", Value.fromI32(value));
  }

  get endCancel(): i32 {
    let value = this.get("endCancel");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endCancel(value: i32) {
    this.set("endCancel", Value.fromI32(value));
  }

  get isClaimed(): boolean {
    let value = this.get("isClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isClaimed(value: boolean) {
    this.set("isClaimed", Value.fromBoolean(value));
  }

  get processTime(): i32 {
    let value = this.get("processTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set processTime(value: i32) {
    this.set("processTime", Value.fromI32(value));
  }
}

export class TransactionHistoryLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TransactionHistory[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TransactionHistory[]>(value);
  }
}

export class UserCommitLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserCommit[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserCommit[]>(value);
  }
}
